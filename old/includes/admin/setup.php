<?php

namespace Qraga\Admin;

/**
 * Qraga Setup Class
 * Handles admin menu registration and script enqueuing.
 */
class Setup {
	/**
	 * Menu slug for the main admin page.
	 * @var string
	 */
	private $menu_slug = 'qraga-admin';

	/**
	 * Constructor.
	 *
	 * @since 1.0.0
	 */
	public function __construct() {
		// Use standard WP hooks
		add_action( 'admin_menu', array( $this, 'register_top_level_page' ) );
		add_action( 'admin_enqueue_scripts', array( $this, 'enqueue_admin_scripts' ) );
	}

	/**
	 * Register the top-level admin page.
	 *
	 * @since x.x.x (Update version)
	 */
	public function register_top_level_page() {
		add_menu_page(
			__( 'Qraga Settings', 'qraga' ),    // Page title
			__( 'Qraga', 'qraga' ),             // Menu title
			'manage_options',                // Capability (adjust if needed, e.g., 'manage_woocommerce')
			$this->menu_slug,                // Menu slug
			array( $this, 'render_admin_page' ), // Callback function to display page content
			'dashicons-cloud-upload',        // Icon URL (Dashicon class)
			56                               // Position (just below WooCommerce/Products)
		);

		// If you want submenus later, add them here using add_submenu_page
		// For example:
		// add_submenu_page(
		// 	$this->menu_slug, // Parent slug
		// 	__( 'Qraga Settings', 'qraga' ), // Page title
		// 	__( 'Settings', 'qraga' ), // Menu title
		// 	'manage_options',
		// 	'qraga-settings', // Submenu slug
		// 	array( $this, 'render_admin_page' ) // Can reuse the same root div renderer
		// );
	}

	/**
	 * Render the basic HTML structure for the admin page (the root div for React).
	 *
	 * @since x.x.x (Update version)
	 */
	public function render_admin_page() {
		?>
		<div class="wrap">
			<div id="qraga-admin-root"></div>
		</div>
		<?php
	}

	/**
	 * Enqueue scripts and styles for the Qraga admin page(s).
	 *
	 * @since x.x.x (Update version)
	 * @param string $hook_suffix The hook suffix for the current admin page.
	 */
	public function enqueue_admin_scripts( $hook_suffix ) {
		// Check if we are on the main Qraga page or potential future subpages
		// Top-level page hook: toplevel_page_qraga-admin
		// Submenu page hook (example): qraga_page_qraga-settings
		$base_hook = 'toplevel_page_' . $this->menu_slug;
		// Add other hooks here if using add_submenu_page later
		$allowed_hooks = array( $base_hook /*, 'qraga_page_qraga-settings' */ );

		if ( ! in_array( $hook_suffix, $allowed_hooks ) ) {
			return;
		}

		// Use asset file generated by @wordpress/scripts
		$script_path       = '/build/index.js';
		$script_asset_path = dirname( MAIN_PLUGIN_FILE ) . '/build/index.asset.php';
		
		// --- Use asset file for dependencies and version ---
		// $dependencies = ['wp-element']; // Only dependency for simple render
		// $version = file_exists(dirname( MAIN_PLUGIN_FILE ) . $script_path) ? filemtime(dirname( MAIN_PLUGIN_FILE ) . $script_path) : '1.0.0';

		// Original asset file loading
		if ( ! file_exists( $script_asset_path ) ) {
			error_log('Qraga Error: You need to run `npm run build` for Qraga. Missing: ' . $script_asset_path);
			return;
		}
		$script_asset = require( $script_asset_path );

		// Explicitly add core React dependencies to ensure they are loaded.
		// This helps rule out issues with dependency resolution from the .asset.php file for these core libs.
		$dependencies = $script_asset['dependencies'];
		if ( ! in_array( 'react', $dependencies ) ) {
			$dependencies[] = 'react';
		}
		if ( ! in_array( 'react-dom', $dependencies ) ) {
			$dependencies[] = 'react-dom';
		}
		// wp-element provides the render function and also depends on react/react-dom
		if ( ! in_array( 'wp-element', $dependencies ) ) {
			$dependencies[] = 'wp-element';
		}

		// Enqueue the main script using asset file data
		wp_enqueue_script(
			'qraga-admin-script',
			plugins_url( $script_path, MAIN_PLUGIN_FILE ),
			// $script_asset['dependencies'], // Use original dependencies from asset file
			$dependencies, // Use the potentially modified dependency array
			$script_asset['version'], // Use original version from asset file
			true // Load in footer
		);

		// Enqueue the main style (keep using asset file version for consistency if desired)
		$style_path = '/build/index.css';
		// $style_asset_path = dirname( MAIN_PLUGIN_FILE ) . '/build/index.asset.php'; // CSS also in asset.php
		// $style_version = $version; // Use same version as JS test
		// if (file_exists( $style_asset_path)) { // Get version from asset file if possible
		// 	$style_script_asset = require( $style_asset_path );
		// 	$style_version = $style_script_asset['version'];
		// }

		// Check if style exists, optional
		if (file_exists(dirname( MAIN_PLUGIN_FILE ) . $style_path)) {
			wp_enqueue_style(
				'qraga-admin-style',
				plugins_url( $style_path, MAIN_PLUGIN_FILE ),
				array('wp-components'), // Ensure WP Component styles are loaded
				// $style_version // Use same version as JS for cache busting
			);
		}

		// Pass theme type data
		wp_localize_script(
			'qraga-admin-script', // The handle of your main admin script
			'qragaAdminData',     // Object name in JavaScript
			array(
				'isBlockTheme' => function_exists('wp_is_block_theme') && wp_is_block_theme(),
				// Add nonce etc. if needed later
				 // 'nonce' => wp_create_nonce( 'wp_rest' ),
			)
		);
    }
}
